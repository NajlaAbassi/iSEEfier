[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement marinif@uni-mainz.de. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 iSEEfier authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/iSEEfier_userguide.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"The `iSEEfier` User's Guide\n","text":"vignette describes use iSEEfier package configure various initial states iSEE instances, order simplify task visualizing single-cell RNA-seq, bulk RNA-seq data, even proteomics data iSEE. remainder vignette, illustrate main features iSEEfier publicly available dataset Baron et al. “Single-Cell Transcriptomic Map Human Mouse Pancreas Reveals Inter- Intra-cell Population Structure”, published Cell Systems 2016. doi:10.1016/j.cels.2016.08.011. data made available via scRNAseq Bioconductor package. ’ll simply use mouse dataset, consisting islets isolated five C57BL/6 ICR mice.","code":""},{"path":"/articles/iSEEfier_userguide.html","id":"gettingstarted","dir":"Articles","previous_headings":"","what":"Getting started","title":"The `iSEEfier` User's Guide\n","text":"install iSEEfier package, start R enter: installed, package can loaded attached current workspace follows:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))   install.packages(\"BiocManager\")  BiocManager::install(\"iSEEfier\") library(\"iSEEfier\")"},{"path":"/articles/iSEEfier_userguide.html","id":"create-an-initial-state-for-gene-expression-visualization-using-iseeinit","dir":"Articles","previous_headings":"","what":"Create an initial state for gene expression visualization using iSEEinit()","title":"The `iSEEfier` User's Guide\n","text":"input elements ready, can create iSEE initial state running: configure initial state iSEE instance using iSEEinit(), need five parameters: sce : SingleCellExperiment object. object stores information different quantifications (counts, log-expression…), dimensionality reduction coordinates (t-SNE, UMAP…), well metadata related samples features. ’ll start loading sce object: Let’s add normalized counts Now can add different dimensionality reduction coordinates Now sce ready, can move next argument. features : list vector genes/features interest. Let’s say like visualize expression genes identified marker genes different cell population. reddim_type : example decided plot data t-SNE plot. clusters : Now specify clusters/cell-types/states/samples like color/split data groups : can add groups/conditions/cell-types can choose include initial step MarkdownBoard DynamicMarkerTable, along linked panels setting arguments add_markdown_panel add_dynamicTable_panel TRUE. point, elements ready transferred iSEEinit() Now one step away visualizing list genes interest. ’s left run iSEE initial state created iSEEinit() instance, generated iSEEinit(), returns combination panels, linked , goal visualizing expression certain marker genes cell population/group: ReducedDimensionPlot, FeatureAssayPlot RowDataTable single gene features. ComplexHeatmapPlot genes features DynamicMarkerTable identifies marker genes sample selection. ColumnDataPlot panel MarkdownBoard panel","code":"iSEEinit(sce = sce_obj,          features = feature_list,          reddim.type = reduced_dim,          clusters = cluster,          groups = group,          add_markdown_panel = FALSE,          add_dynamicTable_panel = FALSE) library(\"scRNAseq\") sce <- BaronPancreasData('mouse') sce #> class: SingleCellExperiment  #> dim: 14878 1886  #> metadata(0): #> assays(1): counts #> rownames(14878): X0610007P14Rik X0610009B22Rik ... Zzz3 l7Rn6 #> rowData names(0): #> colnames(1886): mouse1_lib1.final_cell_0001 mouse1_lib1.final_cell_0002 #>   ... mouse2_lib3.final_cell_0394 mouse2_lib3.final_cell_0395 #> colData names(2): strain label #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): library(\"scuttle\") sce <- logNormCounts(sce) library(\"scater\") sce <- runPCA(sce) sce <- runTSNE(sce) sce <- runUMAP(sce) gene_list <- c(\"Gcg\", # alpha                \"Ins1\") # beta reddim_type <- \"TSNE\" # cell populations cluster <- \"label\" #the name should match what's in the colData names # ICR vs C57BL/6 group <- \"strain\" #the name should match what's in the colData names initial1 <- iSEEinit(sce = sce,                     features = gene_list,                     clusters = cluster,                     groups = group,                     add_markdown_panel = TRUE,                     add_dynamicTable_panel = TRUE) library(\"iSEE\") iSEE(sce, initial= initial1)"},{"path":"/articles/iSEEfier_userguide.html","id":"create-an-initial-state-for-feature-sets-exploration-using-iseenrich","dir":"Articles","previous_headings":"","what":"Create an initial state for feature sets exploration using iSEEnrich()","title":"The `iSEEfier` User's Guide\n","text":"Sometimes interesting look specific feature sets associated genes. ’s utility iSEEnrich becomes apparent. need 4 elements explore feature sets interest: sce: SingleCellExperiment object collection: character vector specifying gene set collections interest (possible use GO KEGG terms) gene_identifier: character string specifying identifier use extract gene IDs organism package. can “ENS” ENSEMBL ids, “SYMBOL” gene names… organism: character string org.*.eg.db package use extract mappings gene sets gene IDs. Now let’s create initial setup iSEE using iSEEnrich() iSEEnrich specifically return list updated sce object associated initial configuration. start iSEE instance run:","code":"GO_collection <- \"GO\" Mm_organism <- \"org.Mm.eg.db\" gene_id <- \"SYMBOL\" results <- iSEEnrich(sce = sce,                      collection = GO_collection,                      organism = Mm_organism,                      gene_identifier = gene_id) iSEE(results$sce, initial = results$initial)"},{"path":"/articles/iSEEfier_userguide.html","id":"visualize-a-preview-of-the-initial-configurations-with-view_initial_tiles","dir":"Articles","previous_headings":"","what":"Visualize a preview of the initial configurations with view_initial_tiles()","title":"The `iSEEfier` User's Guide\n","text":"Previously, successfully generated two distinct initial configurations iSEE. However, understanding expected content iSEE instances always straightforward. ’s can use view_initial_tiles(). need input initial configuration obtain graphical visualization expected corresponding iSEE instance:","code":"library(ggplot2) view_initial_tiles(initial = initial1) view_initial_tiles(initial = results$initial)"},{"path":"/articles/iSEEfier_userguide.html","id":"visualize-network-connections-between-panels-with-view_initial_network","dir":"Articles","previous_headings":"","what":"Visualize network connections between panels with view_initial_network()","title":"The `iSEEfier` User's Guide\n","text":"panels linked , can visualize networks view_initial_network(). Similar iSEEconfigviewer(), function takes initial setup input: function always returns igraph object underlying visualizations can displayed side effect.","code":"library(\"igraph\") library(\"visNetwork\")  g1 <- view_initial_network(initial1, plot_format = \"igraph\") g1 #> IGRAPH 9777175 DN-- 14 5 --  #> + attr: name (v/c), color (v/c) #> + edges from 9777175 (vertex names): #> [1] ReducedDimensionPlot1->ColumnDataPlot1       #> [2] ReducedDimensionPlot2->ColumnDataPlot1       #> [3] ReducedDimensionPlot3->FeatureAssayPlot3     #> [4] ReducedDimensionPlot4->FeatureAssayPlot4     #> [5] DynamicMarkerTable1  ->ReducedDimensionPlot4  initial2 <- results$initial g2 <- view_initial_network(initial2, plot_format = \"visNetwork\")"},{"path":"/articles/iSEEfier_userguide.html","id":"merge-different-initial-configurations-with-glue_initials","dir":"Articles","previous_headings":"","what":"Merge different initial configurations with glue_initials()","title":"The `iSEEfier` User's Guide\n","text":"Sometimes, interesting merge different iSEE initial configurations visualize different panel iSEE instance. can preview content initial configuration","code":"merged_config <- glue_initials(initial1,initial2) view_initial_tiles(merged_config)"},{"path":"/articles/iSEEfier_userguide.html","id":"related-work","dir":"Articles","previous_headings":"","what":"Related work","title":"The `iSEEfier` User's Guide\n","text":"idea launching iSEE() specific configuration entirely new, covered use cases mode_ functions available iSEEu package. , user access following: iSEEu::modeEmpty() - launch iSEE without panels, let build configuration scratch. Easy start, easy build. iSEEu::modeGating() - open iSEE multiple chain-linked FeatureExpressionPlot panels, just like silico gating. good fit working mass cytometry data. iSEEu::modeReducedDim() - iSEE ready compare multiple ReducedDimensionPlot panels, suitable option compare views resulting different embeddings (/embeddings generated slightly different parameter configurations). modes directly launch instance iSEE, whereas functionality iSEEfier rather oriented obtain tailored---data--hand initial objects, can subsequently passed argument iSEE() call. encourage users submit suggestions “classical ways” using iSEE data - opening issue already proposing Pull Request GitHub.","code":""},{"path":"/articles/iSEEfier_userguide.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"The `iSEEfier` User's Guide\n","text":"","code":"sessionInfo() #> R Under development (unstable) (2024-03-12 r86109) #> Platform: x86_64-apple-darwin20 #> Running under: macOS Monterey 12.7.1 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: Europe/Berlin #> tzcode source: internal #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] visNetwork_2.1.2            igraph_2.0.3                #>  [3] scater_1.31.2               ggplot2_3.5.0               #>  [5] scuttle_1.13.1              scRNAseq_2.17.5             #>  [7] SingleCellExperiment_1.25.0 SummarizedExperiment_1.33.3 #>  [9] Biobase_2.63.0              GenomicRanges_1.55.3        #> [11] GenomeInfoDb_1.39.9         IRanges_2.37.1              #> [13] S4Vectors_0.41.4            BiocGenerics_0.49.1         #> [15] MatrixGenerics_1.15.0       matrixStats_1.2.0           #> [17] iSEEfier_0.99.1             BiocStyle_2.31.0            #>  #> loaded via a namespace (and not attached): #>   [1] splines_4.4.0             later_1.3.2               #>   [3] aws.s3_0.3.21             BiocIO_1.13.0             #>   [5] bitops_1.0-7              filelock_1.0.3            #>   [7] tibble_3.2.1              XML_3.99-0.16.1           #>   [9] lifecycle_1.0.4           httr2_1.0.0               #>  [11] doParallel_1.0.17         lattice_0.22-5            #>  [13] ensembldb_2.27.1          alabaster.base_1.3.23     #>  [15] magrittr_2.0.3            sass_0.4.8                #>  [17] rmarkdown_2.26            jquerylib_0.1.4           #>  [19] yaml_2.3.8                httpuv_1.6.14             #>  [21] DBI_1.2.2                 RColorBrewer_1.1-3        #>  [23] abind_1.4-5               zlibbioc_1.49.3           #>  [25] Rtsne_0.17                purrr_1.0.2               #>  [27] AnnotationFilter_1.27.0   RCurl_1.98-1.14           #>  [29] rappdirs_0.3.3            circlize_0.4.16           #>  [31] GenomeInfoDbData_1.2.11   ggrepel_0.9.5             #>  [33] irlba_2.3.5.1             alabaster.sce_1.3.3       #>  [35] DelayedMatrixStats_1.25.1 pkgdown_2.0.7             #>  [37] iSEEhex_1.5.0             codetools_0.2-19          #>  [39] DelayedArray_0.29.9       DT_0.32                   #>  [41] xml2_1.3.6                tidyselect_1.2.1          #>  [43] shape_1.4.6.1             farver_2.1.1              #>  [45] viridis_0.6.5             ScaledMatrix_1.11.1       #>  [47] shinyWidgets_0.8.2        BiocFileCache_2.11.1      #>  [49] base64enc_0.1-3           GenomicAlignments_1.39.4  #>  [51] jsonlite_1.8.8            BiocNeighbors_1.21.2      #>  [53] GetoptLong_1.0.5          ellipsis_0.3.2            #>  [55] iterators_1.0.14          systemfonts_1.0.6         #>  [57] foreach_1.5.2             tools_4.4.0               #>  [59] progress_1.2.3            ragg_1.3.0                #>  [61] Rcpp_1.0.12               glue_1.7.0                #>  [63] gridExtra_2.3             SparseArray_1.3.4         #>  [65] xfun_0.42                 mgcv_1.9-1                #>  [67] dplyr_1.1.4               HDF5Array_1.31.6          #>  [69] gypsum_0.99.15            withr_3.0.0               #>  [71] shinydashboard_0.7.2      BiocManager_1.30.22       #>  [73] fastmap_1.1.1             rhdf5filters_1.15.3       #>  [75] fansi_1.0.6               shinyjs_2.1.0             #>  [77] rsvd_1.0.5                digest_0.6.35             #>  [79] R6_2.5.1                  mime_0.12                 #>  [81] textshaping_0.3.7         colorspace_2.1-0          #>  [83] biomaRt_2.59.1            RSQLite_2.3.5             #>  [85] utf8_1.2.4                generics_0.1.3            #>  [87] hexbin_1.28.3             FNN_1.1.4                 #>  [89] rtracklayer_1.63.1        prettyunits_1.2.0         #>  [91] httr_1.4.7                htmlwidgets_1.6.4         #>  [93] S4Arrays_1.3.6            org.Mm.eg.db_3.18.0       #>  [95] uwot_0.1.16               iSEE_2.15.0               #>  [97] pkgconfig_2.0.3           gtable_0.3.4              #>  [99] blob_1.2.4                ComplexHeatmap_2.19.0     #> [101] XVector_0.43.1            htmltools_0.5.7           #> [103] bookdown_0.38             ProtGenerics_1.35.4       #> [105] rintrojs_0.3.4            clue_0.3-65               #> [107] scales_1.3.0              alabaster.matrix_1.3.13   #> [109] png_0.1-8                 knitr_1.45                #> [111] rstudioapi_0.15.0         rjson_0.2.21              #> [113] nlme_3.1-164              curl_5.2.1                #> [115] shinyAce_0.4.2            cachem_1.0.8              #> [117] rhdf5_2.47.6              GlobalOptions_0.1.2       #> [119] stringr_1.5.1             BiocVersion_3.19.1        #> [121] parallel_4.4.0            miniUI_0.1.1.1            #> [123] vipor_0.4.7               AnnotationDbi_1.65.2      #> [125] restfulr_0.0.15           desc_1.4.3                #> [127] pillar_1.9.0              grid_4.4.0                #> [129] alabaster.schemas_1.3.1   vctrs_0.6.5               #> [131] promises_1.2.1            BiocSingular_1.19.0       #> [133] beachmat_2.19.1           dbplyr_2.4.0              #> [135] iSEEu_1.15.0              xtable_1.8-4              #> [137] cluster_2.1.6             beeswarm_0.4.0            #> [139] evaluate_0.23             GenomicFeatures_1.55.4    #> [141] cli_3.6.2                 compiler_4.4.0            #> [143] Rsamtools_2.19.3          rlang_1.1.3               #> [145] crayon_1.5.2              aws.signature_0.6.0       #> [147] ggbeeswarm_0.7.2          fs_1.6.3                  #> [149] stringi_1.8.3             alabaster.se_1.3.4        #> [151] viridisLite_0.4.2         BiocParallel_1.37.1       #> [153] munsell_0.5.0             Biostrings_2.71.4         #> [155] lazyeval_0.2.2            colourpicker_1.3.0        #> [157] Matrix_1.6-5              ExperimentHub_2.11.1      #> [159] hms_1.1.3                 sparseMatrixStats_1.15.0  #> [161] bit64_4.0.5               Rhdf5lib_1.25.1           #> [163] KEGGREST_1.43.0           shiny_1.8.0               #> [165] highr_0.10                alabaster.ranges_1.3.3    #> [167] AnnotationHub_3.11.1      memoise_2.0.1             #> [169] bslib_0.6.1               bit_4.0.5"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Najla Abassi. Author, maintainer. Federico Marini. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Abassi N, Marini F (2024). iSEEfier: Streamlining creation initial states starting iSEE instance. R package version 0.99.1, https://github.com/NajlaAbassi/iSEEfier.","code":"@Manual{,   title = {iSEEfier: Streamlining the creation of initial states for starting an iSEE instance},   author = {Najla Abassi and Federico Marini},   year = {2024},   note = {R package version 0.99.1},   url = {https://github.com/NajlaAbassi/iSEEfier}, }"},{"path":"/index.html","id":"iseefier","dir":"","previous_headings":"","what":"Streamlining the creation of initial states for starting an iSEE instance","title":"Streamlining the creation of initial states for starting an iSEE instance","text":"goal iSEEfier provides set functionality quickly intuitively create, inspect, combine initial configuration objects iSEE package. can conveniently passed straightforward manner function call launch iSEE() specified configuration, tailored individual visualisation objectives. package currently works seamlessly sets panels provided iSEE iSEEu packages, can extended accommodate usage custom panel (e.g. iSEEde, iSEEpathways, panel developed independently user). iSEEfier can found Bioconductor (https://www.bioconductor.org/packages/iSEEfier).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Streamlining the creation of initial states for starting an iSEE instance","text":"can install development version iSEEfier GitHub :","code":"library(\"remotes\") remotes::install_github(\"NajlaAbassi/iSEEfier\",                          dependencies = TRUE, build_vignettes = TRUE)"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Streamlining the creation of initial states for starting an iSEE instance","text":"basic example shows use iSEEfier demo dataset (one included scRNAseq package).","code":"library(iSEEfier) library(iSEE)  sce <- scRNAseq::RichardTCellData() sce <- scuttle::logNormCounts(sce) sce <- scater::runPCA(sce) sce <- scater::runTSNE(sce)  gene_list <- c(\"ENSMUSG00000026581\", \"ENSMUSG00000005087\", \"ENSMUSG00000015437\") cluster <- \"stimulus\" group <- \"single cell quality\"  initial <- iSEEinit(sce = sce, features = gene_list, clusters = cluster, groups = group)  iSEE(sce, initial = initial)"},{"path":"/index.html","id":"usage-overview","dir":"","previous_headings":"","what":"Usage overview","title":"Streamlining the creation of initial states for starting an iSEE instance","text":"can find rendered version documentation iSEEfier project website https://NajlaAbassi.github.io/iSEEfier, created pkgdown.","code":""},{"path":"/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Streamlining the creation of initial states for starting an iSEE instance","text":"encounter bug, usage questions, want share ideas functionality make package better, feel free file issue.","code":""},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Streamlining the creation of initial states for starting an iSEE instance","text":"Please note iSEEfier project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Streamlining the creation of initial states for starting an iSEE instance","text":"MIT","code":""},{"path":"/reference/constants-iSEEfier.html","id":null,"dir":"Reference","previous_headings":"","what":"Constant values used throughout iSEEfier — constants-iSEEfier","title":"Constant values used throughout iSEEfier — constants-iSEEfier","text":"Constant values used throughout iSEEfier","code":""},{"path":"/reference/constants-iSEEfier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constant values used throughout iSEEfier — constants-iSEEfier","text":"","code":"iSEE_panel_colors"},{"path":"/reference/constants-iSEEfier.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Constant values used throughout iSEEfier — constants-iSEEfier","text":"object class character length 17.","code":""},{"path":"/reference/constants-iSEEfier.html","id":"panel-colors","dir":"Reference","previous_headings":"","what":"Panel colors","title":"Constant values used throughout iSEEfier — constants-iSEEfier","text":"color values (string character hex value) panels included default iSEE iSEEu","code":""},{"path":"/reference/glue_initials.html","id":null,"dir":"Reference","previous_headings":"","what":"Glue together initial objects into one — glue_initials","title":"Glue together initial objects into one — glue_initials","text":"Glue set initial configuration objects, combining single valid initial set.","code":""},{"path":"/reference/glue_initials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glue together initial objects into one — glue_initials","text":"","code":"glue_initials(   ...,   remove_duplicate_panels = TRUE,   verbose = TRUE,   custom_panels_allowed = NULL )"},{"path":"/reference/glue_initials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glue together initial objects into one — glue_initials","text":"... set initial list objects (format required passed parameter call iSEE::iSEE()) - just behavior c()/paste() function remove_duplicate_panels Logical, defaults TRUE. Defines behavior remove panels detected duplicated. Can relevant upon concatenating mid large sets panels. verbose Logical, defaults TRUE. , prints series informative messages describe actions undertaken upon running. custom_panels_allowed Character vector, defaults NULL. Can used specify additional panels allowed concatenation.","code":""},{"path":"/reference/glue_initials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glue together initial objects into one — glue_initials","text":"single initial list object, format required passed parameter call iSEE::iSEE(), concatenating values provided input.","code":""},{"path":"/reference/glue_initials.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Glue together initial objects into one — glue_initials","text":"usage custom_panels_allowed can especially relevant one creates one custom panels, specific name needs indicated parameter. example, using panel class FancyPlotPanel one called FancyTablePanel, value custom_panels_allowed set c(\"FancyPlotPanel\", \"FancyTablePanel\"). worth mentioning iSEE::iSEE() actually able handle automatic renaming panels detected duplicated. can basically relax requirement \"uniqueness\" configured panels, caveat think transmissions panels handled; nevertheless, users might even need face situation.","code":""},{"path":"/reference/glue_initials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Glue together initial objects into one — glue_initials","text":"","code":"## Load a dataset and preprocess this quickly sce <- scRNAseq::RichardTCellData() #> snapshotDate(): 2024-03-18 #> loading from cache #> require(\"ensembldb\") sce <- scuttle::logNormCounts(sce) sce <- scater::runPCA(sce) sce <- scater::runTSNE(sce) ## Select some features and aspects to focus on gene_list_1 <- c(\"ENSMUSG00000026581\") gene_list_2 <- c(\"ENSMUSG00000005087\", \"ENSMUSG00000015437\") cluster <- \"stimulus\" group <- \"single cell quality\" initial1 <- iSEEinit(sce = sce,                      features = gene_list_1,                      clusters = cluster,                      groups = group) initial2 <- iSEEinit(sce = sce,                      features = gene_list_2,                      clusters = cluster,                      groups = group) initials_merged <- glue_initials(initial1,                                  initial2) #> Merging together 2 `initial` configuration objects... #> Combining sets of 6, 10 different panels. #>  #> Dropping 1 of the original list of 16 (detected as duplicated entries) #>  #> Some names of the panels were specified by the same name, but this situation can be handled at runtime by iSEE #> (This is just a non-critical message) #>  #> Returning an `initial` configuration including 15 different panels. Enjoy! #> If you want to obtain a preview of the panels configuration, you can call `view_initial_tiles()` on the output of this function view_initial_tiles(initial1)  view_initial_tiles(initial2)  view_initial_tiles(initials_merged)   ## Continue your exploration directly within iSEE! if (interactive())   iSEE(sce, initial = initial_merged) #> Error in iSEE(sce, initial = initial_merged): could not find function \"iSEE\""},{"path":"/reference/iSEEfier-pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"iSEEfier: a very convenient way to fire up your iSEE instance — iSEEfier-pkg","title":"iSEEfier: a very convenient way to fire up your iSEE instance — iSEEfier-pkg","text":"iSEEfier provides set functionality quickly create, inspect, combine initial configuration objects. can conveniently passed function call launch iSEE() manner. currently works sets panels provided iSEE iSEEu packages, can extended accommodate usage custom panel (e.g. iSEEde, iSEEpathways, panel developed independently user).","code":""},{"path":[]},{"path":"/reference/iSEEfier-pkg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"iSEEfier: a very convenient way to fire up your iSEE instance — iSEEfier-pkg","text":"Maintainer: Najla Abassi abassi.nejla96@gmail.com (ORCID) Authors: Federico Marini marinif@uni-mainz.de (ORCID)","code":""},{"path":"/reference/iSEEinit.html","id":null,"dir":"Reference","previous_headings":"","what":"iSEEinit: Create an initial state of an iSEE instance for gene expression visualization — iSEEinit","title":"iSEEinit: Create an initial state of an iSEE instance for gene expression visualization — iSEEinit","text":"iSEEinit() defines initial setup iSEE instance, recommending tailored visual elements effortlessly illustrate expression gene list single view.","code":""},{"path":"/reference/iSEEinit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"iSEEinit: Create an initial state of an iSEE instance for gene expression visualization — iSEEinit","text":"","code":"iSEEinit(   sce,   features,   reddim_type = \"TSNE\",   clusters = colnames(colData(sce))[1],   groups = colnames(colData(sce))[1],   add_markdown_panel = FALSE,   add_dynamicTable_panel = FALSE )"},{"path":"/reference/iSEEinit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"iSEEinit: Create an initial state of an iSEE instance for gene expression visualization — iSEEinit","text":"sce SingleCellExperiment object features character vector containing list genes reddim_type string vector containing dimensionality reduction type clusters character string containing name clusters/cell-type/state...(listed colData sce) groups character string groups/conditions...(appears colData sce) add_markdown_panel logical indicating whether include MarkdownBoard panel initial configuration add_dynamicTable_panel logical indicating whether DynamicMarkerTable linked panels included initial configuration","code":""},{"path":"/reference/iSEEinit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"iSEEinit: Create an initial state of an iSEE instance for gene expression visualization — iSEEinit","text":"list \"Panel\" objects specifying initial state iSEE instance","code":""},{"path":"/reference/iSEEinit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"iSEEinit: Create an initial state of an iSEE instance for gene expression visualization — iSEEinit","text":"","code":"sce <- scRNAseq::RichardTCellData() #> snapshotDate(): 2024-03-18 #> loading from cache sce <- scuttle::logNormCounts(sce) sce <- scater::runPCA(sce) sce <- scater::runTSNE(sce) gene_list <- c(\"ENSMUSG00000026581\", \"ENSMUSG00000005087\", \"ENSMUSG00000015437\") cluster <- \"stimulus\" group <- \"single cell quality\" initial <- iSEEinit(sce = sce, features = gene_list, clusters = cluster, groups = group)"},{"path":"/reference/iSEEnrich.html","id":null,"dir":"Reference","previous_headings":"","what":"iSEEnrich — iSEEnrich","title":"iSEEnrich — iSEEnrich","text":"iSEEnrich() creates initial state iSEE instance interactive exploration feature sets extracted GO KEGG database, displaying associated genes RowDataTable panel.","code":""},{"path":"/reference/iSEEnrich.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"iSEEnrich — iSEEnrich","text":"","code":"iSEEnrich(   sce,   collection = c(\"GO\", \"KEGG\"),   organism = \"org.Hs.eg.db\",   gene_identifier = \"ENTREZID\" )"},{"path":"/reference/iSEEnrich.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"iSEEnrich — iSEEnrich","text":"sce SingleCellExperiment object collection character vector specifying gene set collections interest (GO,KEGG) organism character string org.*.eg.db package use extract mappings gene sets gene IDs. gene_identifier character string specifying identifier use extract gene IDs organism package","code":""},{"path":"/reference/iSEEnrich.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"iSEEnrich — iSEEnrich","text":"list \"Panel\" objects specifying initial state iSEE instance","code":""},{"path":"/reference/iSEEnrich.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"iSEEnrich — iSEEnrich","text":"","code":"sce <- scRNAseq::RichardTCellData() #> snapshotDate(): 2024-03-18 #> loading from cache sce <- scuttle::logNormCounts(sce) sce <- scater::runPCA(sce) GO_collection <- \"GO\" Mm_organism <- \"org.Mm.eg.db\" gene_id <- \"SYMBOL\" results <- iSEEnrich(sce = sce,                      collection = GO_collection,                      organism = Mm_organism,                      gene_identifier = gene_id) #>"},{"path":"/reference/view_initial_network.html","id":null,"dir":"Reference","previous_headings":"","what":"View an initial object as a network — view_initial_network","title":"View an initial object as a network — view_initial_network","text":"Translates layout initial configuration object networks, representing panels nodes links edges.","code":""},{"path":"/reference/view_initial_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View an initial object as a network — view_initial_network","text":"","code":"view_initial_network(initial, plot_format = c(\"igraph\", \"visNetwork\", \"none\"))"},{"path":"/reference/view_initial_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View an initial object as a network — view_initial_network","text":"initial initial list object, format required passed parameter call iSEE::iSEE(). plot_format Character string, one igraph, visNetwork, none. Defaults igraph. Determines format visual representation generated side effect function - can output plot() function igraph objects, interactive widget created via visNetwork::visNetwork().","code":""},{"path":"/reference/view_initial_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View an initial object as a network — view_initial_network","text":"igraph object, underlying visual representation provided.","code":""},{"path":"/reference/view_initial_network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"View an initial object as a network — view_initial_network","text":"Panels nodes, color names identify easily. connections among panels represented directed edges. can compact visualization obtain overview configuration, without need fully launching app loading content panels function particularly useful mid--large initial objects, can quickly generated programmatic manner via iSEEinit() provided package.","code":""},{"path":[]},{"path":"/reference/view_initial_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View an initial object as a network — view_initial_network","text":"","code":"## Load a dataset and preprocess this quickly sce <- scRNAseq::RichardTCellData() #> snapshotDate(): 2024-03-18 #> loading from cache sce <- scuttle::logNormCounts(sce) sce <- scater::runPCA(sce) sce <- scater::runTSNE(sce) ## Select some features and aspects to focus on gene_list <- c(\"ENSMUSG00000026581\", \"ENSMUSG00000005087\", \"ENSMUSG00000015437\") cluster <- \"stimulus\" group <- \"single cell quality\" initial <- iSEEinit(sce = sce,                     features = gene_list,                     clusters = cluster,                     groups = group)  g_init <- view_initial_network(initial)  g_init #> IGRAPH 19d928c DN-- 13 4 --  #> + attr: name (v/c), color (v/c) #> + edges from 19d928c (vertex names): #> [1] ReducedDimensionPlot1->ColumnDataPlot1   #> [2] ReducedDimensionPlot2->ColumnDataPlot1   #> [3] ReducedDimensionPlot3->ColumnDataPlot1   #> [4] ReducedDimensionPlot4->FeatureAssayPlot4  view_initial_network(initial, plot_format = \"visNetwork\") #> IGRAPH 8f20ff4 DN-- 13 4 --  #> + attr: name (v/c), color (v/c) #> + edges from 8f20ff4 (vertex names): #> [1] ReducedDimensionPlot1->ColumnDataPlot1   #> [2] ReducedDimensionPlot2->ColumnDataPlot1   #> [3] ReducedDimensionPlot3->ColumnDataPlot1   #> [4] ReducedDimensionPlot4->FeatureAssayPlot4  ## Continue your exploration directly within iSEE! if (interactive())   iSEE(sce, initial = initial) #> Error in iSEE(sce, initial = initial): could not find function \"iSEE\""},{"path":"/reference/view_initial_tiles.html","id":null,"dir":"Reference","previous_headings":"","what":"View an initial object as a set of tiles — view_initial_tiles","title":"View an initial object as a set of tiles — view_initial_tiles","text":"Previews layout initial configuration object graphical form.","code":""},{"path":"/reference/view_initial_tiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View an initial object as a set of tiles — view_initial_tiles","text":"","code":"view_initial_tiles(initial)"},{"path":"/reference/view_initial_tiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View an initial object as a set of tiles — view_initial_tiles","text":"initial initial list object, format required passed parameter call iSEE::iSEE().","code":""},{"path":"/reference/view_initial_tiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View an initial object as a set of tiles — view_initial_tiles","text":"ggplot object, representing schematic view initial object.","code":""},{"path":"/reference/view_initial_tiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"View an initial object as a set of tiles — view_initial_tiles","text":"Tiles used represent panel types, reflect values width. can compact visualization obtain overview configuration, without need fully launching app loading content panels function particularly useful mid--large initial objects, can quickly generated programmatic manner via iSEEinit() provided package.","code":""},{"path":[]},{"path":"/reference/view_initial_tiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View an initial object as a set of tiles — view_initial_tiles","text":"","code":"## Load a dataset and preprocess this quickly sce <- scRNAseq::RichardTCellData() #> snapshotDate(): 2024-03-18 #> loading from cache sce <- scuttle::logNormCounts(sce) sce <- scater::runPCA(sce) sce <- scater::runTSNE(sce) ## Select some features and aspects to focus on gene_list <- c(\"ENSMUSG00000026581\", \"ENSMUSG00000005087\", \"ENSMUSG00000015437\") cluster <- \"stimulus\" group <- \"single cell quality\" initial <- iSEEinit(sce = sce,                     features = gene_list,                     clusters = cluster,                     groups = group)  view_initial_tiles (initial)   ## Continue your exploration directly within iSEE! if (interactive())   iSEE(sce, initial = initial) #> Error in iSEE(sce, initial = initial): could not find function \"iSEE\""},{"path":"/news/index.html","id":"iseefier-0991","dir":"Changelog","previous_headings":"","what":"iSEEfier 0.99.1","title":"iSEEfier 0.99.1","text":"Ready Bioconductor review","code":""},{"path":"/news/index.html","id":"iseefier-0990","dir":"Changelog","previous_headings":"","what":"iSEEfier 0.99.0","title":"iSEEfier 0.99.0","text":"Ready Bioconductor submission!","code":""},{"path":"/news/index.html","id":"iseefier-030","dir":"Changelog","previous_headings":"","what":"iSEEfier 0.3.0","title":"iSEEfier 0.3.0","text":"Main functions equipped extra parameters determining behavior Unit test suite fully !","code":""},{"path":"/news/index.html","id":"iseefier-020","dir":"Changelog","previous_headings":"","what":"iSEEfier 0.2.0","title":"iSEEfier 0.2.0","text":"Functions renamed final version, matching descriptive manner","code":""},{"path":"/news/index.html","id":"iseefier-010","dir":"Changelog","previous_headings":"","what":"iSEEfier 0.1.0","title":"iSEEfier 0.1.0","text":"Initial concept package!","code":""}]
